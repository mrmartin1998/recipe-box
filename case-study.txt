Complete User Journey Test Flow

1. Register New User
    POST /api/auth/register
    {
        "name": "John Smith",
        "email": "john@example.com",
        "password": "secure_password"
    }

2. Login
    POST /api/auth/login
    {
        "email": "john@example.com",
        "password": "secure_password"
    }
    → Save JWT token for subsequent requests

3. Create Basic Ingredients
    POST /api/ingredients (multiple calls)
    a. Create Spaghetti
    {
        "name": "spaghetti",
        "category": "pasta",
        "defaultUnit": "g",
        "isPublic": true
    }
    → Save SPAGHETTI_ID from response

    b. Create Eggs
    {
        "name": "eggs",
        "category": "dairy",
        "defaultUnit": "whole",
        "isPublic": true
    }
    → Save EGGS_ID from response

    c. Create Parmesan
    {
        "name": "parmesan",
        "category": "dairy",
        "defaultUnit": "g",
        "isPublic": true
    }
    → Save PARMESAN_ID from response

    d. Create Bacon
    {
        "name": "bacon",
        "category": "meat",
        "defaultUnit": "g",
        "isPublic": true
    }
    → Save BACON_ID from response

    e. Create Black Pepper
    {
        "name": "black pepper",
        "category": "spices",
        "defaultUnit": "tsp",
        "isPublic": true
    }
    → Save BLACK_PEPPER_ID from response

    f. Create Salt
    {
        "name": "salt",
        "category": "spices",
        "defaultUnit": "tsp",
        "isPublic": true
    }
    → Save SALT_ID from response

4. Verify Ingredients
    GET /api/ingredients
    Query params: { category: "pasta" }
    → Confirm all ingredients are in system

    GET /api/ingredients
    Query params: { category: "dairy" }
    → Confirm dairy ingredients

    GET /api/ingredients
    Query params: { category: "meat" }
    → Confirm meat ingredients

    GET /api/ingredients
    Query params: { category: "spices" }
    → Confirm spice ingredients

5. Create Recipe
    POST /api/recipes
    {
        "name": "Spaghetti Carbonara",
        "description": "A classic Italian pasta dish...",
        "servings": 4,
        "prepTime": 15,
        "cookTime": 20,
        "difficulty": "medium",
        "ingredients": [
            {
                "item": "676a80f91bde6074c6de347d",
                "amount": 400,
                "unit": "g",
                "notes": "spaghetti"
            },
            {
                "item": "676a811e1bde6074c6de3482",
                "amount": 4,
                "unit": "whole",
                "notes": "large eggs"
            },
            {
                "item": "676a81301bde6074c6de3486",
                "amount": 100,
                "unit": "g",
                "notes": "freshly grated"
            },
            {
                "item": "676a81461bde6074c6de348a",
                "amount": 150,
                "unit": "g",
                "notes": "diced"
            },
            {
                "item": "676a81571bde6074c6de348e",
                "amount": 2,
                "unit": "tsp",
                "notes": "freshly ground"
            },
            {
                "item": "676a81691bde6074c6de3492",
                "amount": 1,
                "unit": "tsp",
                "notes": "for pasta water"
            }
        ],
        "steps": [
            {
                "order": 1,
                "description": "Boil pasta in salted water until al dente",
                "timer": 10
            },
            {
                "order": 2,
                "description": "Cut bacon into small pieces and fry until crispy",
                "timer": 8
            },
            {
                "order": 3,
                "description": "Beat eggs in a bowl and mix with grated parmesan cheese",
                "timer": 0
            },
            {
                "order": 4,
                "description": "Drain pasta, reserving some pasta water",
                "timer": 0
            },
            {
                "order": 5,
                "description": "While pasta is still hot, quickly stir in egg and cheese mixture",
                "timer": 0
            },
            {
                "order": 6,
                "description": "Add crispy bacon and toss well",
                "timer": 0
            },
            {
                "order": 7,
                "description": "Season with black pepper and salt to taste",
                "timer": 0
            },
            {
                "order": 8,
                "description": "If needed, add a splash of reserved pasta water to create a creamy sauce",
                "timer": 0
            }
        ]
    }
    → Save RECIPE_ID from response
    

6. Verify Recipe
    GET /api/recipes/RECIPE_ID
    → Check recipe details and ingredients

7. Generate Shopping List from Recipe
    POST /api/shopping-lists/recipe/RECIPE_ID
    {
        "servings": 4
    }
    → Get shopping list for ingredients
    → Save SHOPPING_LIST_ID from response

8. View Shopping List Details
    GET /api/shopping-lists/SHOPPING_LIST_ID
    → Verify all items are present

9. Update Shopping List Items & Stock
    PUT /api/shopping-lists/items/ITEM_ID
    {
        "completed": true,
        "addToStock": true
    }
    → Repeat for each item
    → System should automatically add to stock

10. Check Stock Levels
    GET /api/stock
    → Verify ingredients are in stock
    GET /api/recipes/possible
    → Check if recipe can be made

11. Create Meal Plan
    POST /api/meal-plans
    {
        "startDate": "2024-03-18",
        "endDate": "2024-03-24",
        "meals": [
            {
                "recipe": "RECIPE_ID",
                "date": "2024-03-18",
                "mealType": "dinner",
                "servings": 4
            }
        ]
    }
    → Save MEAL_PLAN_ID from response

12. Generate Shopping List from Meal Plan
    POST /api/meal-plans/MEAL_PLAN_ID/shopping-list
    → Get aggregated shopping list for all meals
    → Save MEAL_PLAN_SHOPPING_LIST_ID from response

13. Manage Meal Plan
    a. View Meal Plan Details
        GET /api/meal-plans/MEAL_PLAN_ID
        → Check all meals are correctly listed
    
    b. Add New Meal to Plan
        PUT /api/meal-plans/MEAL_PLAN_ID
        {
            "meals": [
                {
                    "recipe": "RECIPE_ID",
                    "date": "2024-03-19",
                    "mealType": "lunch",
                    "servings": 2
                }
            ]
        }
    
    c. Update Specific Meal
        PUT /api/meal-plans/MEAL_PLAN_ID/meals/MEAL_ID
        {
            "servings": 3,
            "notes": "Make extra for leftovers"
        }
    
    d. Remove Meal from Plan
        DELETE /api/meal-plans/MEAL_PLAN_ID/meals/MEAL_ID

14. Manage Shopping Lists
    a. View All Shopping Lists
        GET /api/shopping-lists
        → Should see both recipe and meal plan lists
    
    b. View Specific List
        GET /api/shopping-lists/SHOPPING_LIST_ID
        → Verify all items are present
    
    c. Update Items
        PUT /api/shopping-lists/items/ITEM_ID
        {
            "completed": true,
            "addToStock": true
        }
        → Repeat for each item
        → Verify stock is updated

15. Stock Management
    a. View Current Stock
        GET /api/stock
        → Verify ingredients added from shopping list
    
    b. Check Low Stock
        GET /api/stock
        Query params: { lowStock: true }
        → Identify items below minimum quantity
    
    c. Update Stock After Cooking
        PUT /api/stock/STOCK_ID
        {
            "quantity": "REMAINING_AMOUNT",
            "unit": "g"
        }
        → Update for each used ingredient

16. Recipe Suggestions
    a. Get Possible Recipes
        GET /api/recipes/possible
        → Check which recipes can be made with current stock
    
    b. Get Meal Plan Suggestions
        GET /api/meal-plans/suggestions
        Query params: { 
            "mealType": "dinner",
            "maxPrepTime": 30
        }
        → Get recipe suggestions based on stock

17. Archive Management
    a. Archive Shopping List
        PUT /api/shopping-lists/SHOPPING_LIST_ID
        {
            "isArchived": true
        }
    
    b. View Archived Lists
        GET /api/shopping-lists
        Query params: { archived: true }
        → Verify archived lists are accessible

Error Scenarios to Test at Each Step:
1. Invalid registration data
2. Wrong login credentials
3. Duplicate ingredients
4. Invalid recipe data
5. Insufficient stock
6. Invalid meal plan dates
7. Stock updates with invalid quantities
8. Unauthorized access to other users' shopping lists
9. Invalid shopping list item IDs
10. Invalid meal plan updates
11. Overlapping meal plans
12. Invalid stock quantities or units
13. Missing required fields in all requests
14. Invalid date formats
15. Non-existent recipe references

Success Criteria:
1. All API endpoints return expected responses
2. Data relationships are maintained
3. Stock levels update correctly
4. Shopping lists reflect accurate quantities
5. Meal plans organize recipes correctly
6. Authentication works consistently
7. Error handling provides clear messages